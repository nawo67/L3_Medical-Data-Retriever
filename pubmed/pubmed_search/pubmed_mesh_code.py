import asyncio

from pubmed.pubmed_search.pubmed_Req import Req
from MeSH.meshData_func import depthMeshEnglishTitle

def ReqMesh(nbId, nbPage, nbPageMin, search, fileName, y, depth, openType, meshTree, pbar, pubmedProgressBar):
    """
    Runs PubMed requests using MeSH terms generated by depthMesh.

    This function generates a list of titles based on the depth in the MeSH tree and
    performs PubMed requests for each title. The results are saved in a file.

    Parameters:
    nbId (int): The number of IDs per page to fetch.
    nbPage (int): The number of pages to fetch.
    nbPageMin (int): The starting page number.
    search (str): The initial MeSH search term.
    fileName (str): The name of the file to save the results.
    y (int): The year to search within.
    depth (int): The depth level to search in the MeSH tree.
    openType (str): The file open mode, e.g., 'w' for write, 'a' for append.
    meshTree (list): The mesh data to use for finding codes and unique IDs.
    pbar: The progress bar object for tracking progress.
    pubmedProgressBar: The progress bar for PubMed requests.

    Returns:
    bool: Always returns False (could be used for error handling or future expansion).
    """
    # Generate a list of titles based on the depth in the MeSH tree
    titleList = depthMeshEnglishTitle(search, depth, meshTree)
    # Loop through the titles and perform PubMed requests
    for i, title in enumerate(titleList):
        # Determine the file open mode based on the iteration
        current_open_type = openType if i == 0 else 'a'

        asyncio.run(Req(nbId, nbPage, nbPageMin, title+"[MeSH Terms]", fileName, y, current_open_type, meshTree, pbar, pubmedProgressBar, i, len(titleList)))

    return False